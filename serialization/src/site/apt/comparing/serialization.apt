~~
~~ Copyright (C) cedarsoft GmbH.
~~
~~ Licensed under the GNU General Public License version 3 (the "License")
~~ with Classpath Exception; you may not use this file except in compliance
~~ with the License. You may obtain a copy of the License at
~~
~~         http://www.cedarsoft.org/gpl3ce
~~         (GPL 3 with Classpath Exception)
~~
~~ This code is free software; you can redistribute it and/or modify it
~~ under the terms of the GNU General Public License version 3 only, as
~~ published by the Free Software Foundation. cedarsoft GmbH designates this
~~ particular file as subject to the "Classpath" exception as provided
~~ by cedarsoft GmbH in the LICENSE file that accompanied this code.
~~
~~ This code is distributed in the hope that it will be useful, but WITHOUT
~~ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
~~ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
~~ version 3 for more details (a copy is included in the LICENSE file that
~~ accompanied this code).
~~
~~ You should have received a copy of the GNU General Public License version
~~ 3 along with this work; if not, write to the Free Software Foundation,
~~ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
~~
~~ Please contact cedarsoft GmbH, 72810 Gomaringen, Germany,
~~ or visit www.cedarsoft.com if you need additional information or
~~ have any questions.
~~

Comparing to plain old Serialization

  Serialization has been added to Java a long time ago (version 1.1) and is a very basic part of the language.
  It has its strengths and weaknesses. It has quite a good performance. It is commonly used when using
  RMI or persistent sessions in web application servers.

* Pros

  * Serialization is easy and a build in feature.

  * Performance is not great - but good.

  * Well understood and commonly used (session, RMI)

  * Contains version information. Old serialized objects can't be read accidentally.

* Cons

  * Very unstable! Old serialized objects can *not* be deserialized. Adding the <serialVersionUID> does not
    solve that issue but improves it a little.

  * Version information is not very verbose. Doesn't contain any information whether the current version is
    newer or older.

  * Inflexibility: It is not possible to convert old serialized objects.

  * Performance: Quite good but not necessary for high performance projects

* Conclusion

  It is <<not>> suggested to use serialization for long term storage. You definitely will run into problems if Serialization
  is used as long/mid term storage.

  Because of the lack of a simple method to recover/convert old serialized objects, you will run into serious trouble with
  a very high probability of data loss or very high costs for conversion.




