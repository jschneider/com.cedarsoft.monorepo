~~
~~ Copyright (C) cedarsoft GmbH.
~~
~~ Licensed under the GNU General Public License version 3 (the "License")
~~ with Classpath Exception; you may not use this file except in compliance
~~ with the License. You may obtain a copy of the License at
~~
~~         http://www.cedarsoft.org/gpl3ce
~~         (GPL 3 with Classpath Exception)
~~
~~ This code is free software; you can redistribute it and/or modify it
~~ under the terms of the GNU General Public License version 3 only, as
~~ published by the Free Software Foundation. cedarsoft GmbH designates this
~~ particular file as subject to the "Classpath" exception as provided
~~ by cedarsoft GmbH in the LICENSE file that accompanied this code.
~~
~~ This code is distributed in the hope that it will be useful, but WITHOUT
~~ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
~~ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
~~ version 3 for more details (a copy is included in the LICENSE file that
~~ accompanied this code).
~~
~~ You should have received a copy of the GNU General Public License version
~~ 3 along with this work; if not, write to the Free Software Foundation,
~~ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
~~
~~ Please contact cedarsoft GmbH, 72810 Gomaringen, Germany,
~~ or visit www.cedarsoft.com if you need additional information or
~~ have any questions.
~~

Comparing to XStream


  {{{http://xstream.codehaus.org/XStream}XStream}} is a very mature library and one of the big player in the world of automated serialization.

  The biggest strength of XStream is that you get your first results with very little effort.

* Pros

  * XStream is very easy to use

  * Get your first results very, very fast

  * Mature library that handles many cases very well (collections, references)

  * Quite flexible. Allows the addition of aliases to provide some backwards compatibility

  * Extensible: You can create own converters (for special cases or performance improvements)

* Cons

  * Unstable. It is possible to refactor your objects and reflect those changes using aliases.
    But just very basic changes are supported (like renames).

  * Missing version information. It is not possible to decide whether the serialized object can be deserialized without
    simply trying it. Danger! Strange side effects may happen.

  * Flexibility needs work: It is possible to reflect minor changes using aliases. But sooner or later
    you will have to implement your own converter from scratch.

  * Performance: Quite good but probably not necessary for high performance projects

* Conclusion

  Long term storage using XStream contains risks. Small refactoring can be done easily, but bigger refactorings need a lot of
  work. Many times you will have to write a custom converter later.

  While it is probably possible to convert old serialized objects, it needs some work. And often a bit of "magic" to detect (or better: guess)
  the format version.

